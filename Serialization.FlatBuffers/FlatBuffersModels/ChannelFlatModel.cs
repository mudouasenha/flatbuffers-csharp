// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffersModels
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ChannelFlatModel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static ChannelFlatModel GetRootAsChannelFlatModel(ByteBuffer _bb) { return GetRootAsChannelFlatModel(_bb, new ChannelFlatModel()); }
  public static ChannelFlatModel GetRootAsChannelFlatModel(ByteBuffer _bb, ChannelFlatModel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ChannelFlatModel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public int Subscribers { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateSubscribers(int subscribers) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, subscribers); return true; } else { return false; } }
  public string ChannelId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChannelIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetChannelIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetChannelIdArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<FlatBuffersModels.ChannelFlatModel> CreateChannelFlatModel(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      int subscribers = 0,
      StringOffset channel_idOffset = default(StringOffset)) {
    builder.StartTable(3);
    ChannelFlatModel.AddChannelId(builder, channel_idOffset);
    ChannelFlatModel.AddSubscribers(builder, subscribers);
    ChannelFlatModel.AddName(builder, nameOffset);
    return ChannelFlatModel.EndChannelFlatModel(builder);
  }

  public static void StartChannelFlatModel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddSubscribers(FlatBufferBuilder builder, int subscribers) { builder.AddInt(1, subscribers, 0); }
  public static void AddChannelId(FlatBufferBuilder builder, StringOffset channelIdOffset) { builder.AddOffset(2, channelIdOffset.Value, 0); }
  public static Offset<FlatBuffersModels.ChannelFlatModel> EndChannelFlatModel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffersModels.ChannelFlatModel>(o);
  }
}


static public class ChannelFlatModelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Name*/, false)
      && verifier.VerifyField(tablePos, 6 /*Subscribers*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*ChannelId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
