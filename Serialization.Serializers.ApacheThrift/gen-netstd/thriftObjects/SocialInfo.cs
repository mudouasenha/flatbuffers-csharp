/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.19.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace thriftObjects
{

  public partial class SocialInfo : TBase
  {
    private int _Likes;
    private int _Dislikes;
    private List<string> _Comments;
    private int _Views;

    public int Likes
    {
      get
      {
        return _Likes;
      }
      set
      {
        __isset.Likes = true;
        this._Likes = value;
      }
    }

    public int Dislikes
    {
      get
      {
        return _Dislikes;
      }
      set
      {
        __isset.Dislikes = true;
        this._Dislikes = value;
      }
    }

    public List<string> Comments
    {
      get
      {
        return _Comments;
      }
      set
      {
        __isset.Comments = true;
        this._Comments = value;
      }
    }

    public int Views
    {
      get
      {
        return _Views;
      }
      set
      {
        __isset.Views = true;
        this._Views = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool Likes;
      public bool Dislikes;
      public bool Comments;
      public bool Views;
    }

    public SocialInfo()
    {
    }

    public SocialInfo DeepCopy()
    {
      var tmp5 = new SocialInfo();
      if(__isset.Likes)
      {
        tmp5.Likes = this.Likes;
      }
      tmp5.__isset.Likes = this.__isset.Likes;
      if(__isset.Dislikes)
      {
        tmp5.Dislikes = this.Dislikes;
      }
      tmp5.__isset.Dislikes = this.__isset.Dislikes;
      if((Comments != null) && __isset.Comments)
      {
        tmp5.Comments = this.Comments.DeepCopy();
      }
      tmp5.__isset.Comments = this.__isset.Comments;
      if(__isset.Views)
      {
        tmp5.Views = this.Views;
      }
      tmp5.__isset.Views = this.__isset.Views;
      return tmp5;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Likes = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Dislikes = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  var _list6 = await iprot.ReadListBeginAsync(cancellationToken);
                  Comments = new List<string>(_list6.Count);
                  for(int _i7 = 0; _i7 < _list6.Count; ++_i7)
                  {
                    string _elem8;
                    _elem8 = await iprot.ReadStringAsync(cancellationToken);
                    Comments.Add(_elem8);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Views = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp9 = new TStruct("SocialInfo");
        await oprot.WriteStructBeginAsync(tmp9, cancellationToken);
        var tmp10 = new TField();
        if(__isset.Likes)
        {
          tmp10.Name = "Likes";
          tmp10.Type = TType.I32;
          tmp10.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp10, cancellationToken);
          await oprot.WriteI32Async(Likes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Dislikes)
        {
          tmp10.Name = "Dislikes";
          tmp10.Type = TType.I32;
          tmp10.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp10, cancellationToken);
          await oprot.WriteI32Async(Dislikes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Comments != null) && __isset.Comments)
        {
          tmp10.Name = "Comments";
          tmp10.Type = TType.List;
          tmp10.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp10, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.String, Comments.Count), cancellationToken);
          foreach (string _iter11 in Comments)
          {
            await oprot.WriteStringAsync(_iter11, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Views)
        {
          tmp10.Name = "Views";
          tmp10.Type = TType.I32;
          tmp10.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp10, cancellationToken);
          await oprot.WriteI32Async(Views, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SocialInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.Likes == other.__isset.Likes) && ((!__isset.Likes) || (global::System.Object.Equals(Likes, other.Likes))))
        && ((__isset.Dislikes == other.__isset.Dislikes) && ((!__isset.Dislikes) || (global::System.Object.Equals(Dislikes, other.Dislikes))))
        && ((__isset.Comments == other.__isset.Comments) && ((!__isset.Comments) || (TCollections.Equals(Comments, other.Comments))))
        && ((__isset.Views == other.__isset.Views) && ((!__isset.Views) || (global::System.Object.Equals(Views, other.Views))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.Likes)
        {
          hashcode = (hashcode * 397) + Likes.GetHashCode();
        }
        if(__isset.Dislikes)
        {
          hashcode = (hashcode * 397) + Dislikes.GetHashCode();
        }
        if((Comments != null) && __isset.Comments)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Comments);
        }
        if(__isset.Views)
        {
          hashcode = (hashcode * 397) + Views.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp12 = new StringBuilder("SocialInfo(");
      int tmp13 = 0;
      if(__isset.Likes)
      {
        if(0 < tmp13++) { tmp12.Append(", "); }
        tmp12.Append("Likes: ");
        Likes.ToString(tmp12);
      }
      if(__isset.Dislikes)
      {
        if(0 < tmp13++) { tmp12.Append(", "); }
        tmp12.Append("Dislikes: ");
        Dislikes.ToString(tmp12);
      }
      if((Comments != null) && __isset.Comments)
      {
        if(0 < tmp13++) { tmp12.Append(", "); }
        tmp12.Append("Comments: ");
        Comments.ToString(tmp12);
      }
      if(__isset.Views)
      {
        if(0 < tmp13++) { tmp12.Append(", "); }
        tmp12.Append("Views: ");
        Views.ToString(tmp12);
      }
      tmp12.Append(')');
      return tmp12.ToString();
    }
  }

}
