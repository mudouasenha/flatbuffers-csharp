/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.19.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace thriftObjects
{

  public partial class VideoInfo : TBase
  {
    private long _Duration;
    private string _Description;
    private long _Size;
    private List<global::thriftObjects.VideoQualities> _Qualities;

    public long Duration
    {
      get
      {
        return _Duration;
      }
      set
      {
        __isset.Duration = true;
        this._Duration = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public long Size
    {
      get
      {
        return _Size;
      }
      set
      {
        __isset.Size = true;
        this._Size = value;
      }
    }

    public List<global::thriftObjects.VideoQualities> Qualities
    {
      get
      {
        return _Qualities;
      }
      set
      {
        __isset.Qualities = true;
        this._Qualities = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool Duration;
      public bool Description;
      public bool Size;
      public bool Qualities;
    }

    public VideoInfo()
    {
    }

    public VideoInfo DeepCopy()
    {
      var tmp14 = new VideoInfo();
      if(__isset.Duration)
      {
        tmp14.Duration = this.Duration;
      }
      tmp14.__isset.Duration = this.__isset.Duration;
      if((Description != null) && __isset.Description)
      {
        tmp14.Description = this.Description;
      }
      tmp14.__isset.Description = this.__isset.Description;
      if(__isset.Size)
      {
        tmp14.Size = this.Size;
      }
      tmp14.__isset.Size = this.__isset.Size;
      if((Qualities != null) && __isset.Qualities)
      {
        tmp14.Qualities = this.Qualities.DeepCopy();
      }
      tmp14.__isset.Qualities = this.__isset.Qualities;
      return tmp14;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Duration = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Description = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Size = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  var _list15 = await iprot.ReadListBeginAsync(cancellationToken);
                  Qualities = new List<global::thriftObjects.VideoQualities>(_list15.Count);
                  for(int _i16 = 0; _i16 < _list15.Count; ++_i16)
                  {
                    global::thriftObjects.VideoQualities _elem17;
                    _elem17 = (global::thriftObjects.VideoQualities)await iprot.ReadI32Async(cancellationToken);
                    Qualities.Add(_elem17);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp18 = new TStruct("VideoInfo");
        await oprot.WriteStructBeginAsync(tmp18, cancellationToken);
        var tmp19 = new TField();
        if(__isset.Duration)
        {
          tmp19.Name = "Duration";
          tmp19.Type = TType.I64;
          tmp19.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
          await oprot.WriteI64Async(Duration, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Description != null) && __isset.Description)
        {
          tmp19.Name = "Description";
          tmp19.Type = TType.String;
          tmp19.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
          await oprot.WriteStringAsync(Description, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Size)
        {
          tmp19.Name = "Size";
          tmp19.Type = TType.I64;
          tmp19.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
          await oprot.WriteI64Async(Size, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Qualities != null) && __isset.Qualities)
        {
          tmp19.Name = "Qualities";
          tmp19.Type = TType.List;
          tmp19.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.I32, Qualities.Count), cancellationToken);
          foreach (global::thriftObjects.VideoQualities _iter20 in Qualities)
          {
            await oprot.WriteI32Async((int)_iter20, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is VideoInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.Duration == other.__isset.Duration) && ((!__isset.Duration) || (global::System.Object.Equals(Duration, other.Duration))))
        && ((__isset.Description == other.__isset.Description) && ((!__isset.Description) || (global::System.Object.Equals(Description, other.Description))))
        && ((__isset.Size == other.__isset.Size) && ((!__isset.Size) || (global::System.Object.Equals(Size, other.Size))))
        && ((__isset.Qualities == other.__isset.Qualities) && ((!__isset.Qualities) || (TCollections.Equals(Qualities, other.Qualities))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.Duration)
        {
          hashcode = (hashcode * 397) + Duration.GetHashCode();
        }
        if((Description != null) && __isset.Description)
        {
          hashcode = (hashcode * 397) + Description.GetHashCode();
        }
        if(__isset.Size)
        {
          hashcode = (hashcode * 397) + Size.GetHashCode();
        }
        if((Qualities != null) && __isset.Qualities)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Qualities);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp21 = new StringBuilder("VideoInfo(");
      int tmp22 = 0;
      if(__isset.Duration)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("Duration: ");
        Duration.ToString(tmp21);
      }
      if((Description != null) && __isset.Description)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("Description: ");
        Description.ToString(tmp21);
      }
      if(__isset.Size)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("Size: ");
        Size.ToString(tmp21);
      }
      if((Qualities != null) && __isset.Qualities)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("Qualities: ");
        Qualities.ToString(tmp21);
      }
      tmp21.Append(')');
      return tmp21.ToString();
    }
  }

}
